from django.shortcuts import get_object_or_404, render
from rest_framework.views import APIView
from rest_framework.response import Response
import requests
from .models import apps_getter, campuses_getter, campus_questions_getter, faq_getter, discounts_getter, coworking_getter, help_getter

# from bot_helper.utils import get_data_from_xlsx
from .structure.AliceResponse import AliceResponse, Button
from .structure.AliceEvent import AliceEvent
from random import choice as randomchoice
from random import seed
import users.models as user_models
import users.serializers as user_serializers


def common_intent(event, text=None, tts=None, show_text=True, *args, **kwargs):

    _text = "–Ø –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —á–µ–≥–æ –∑–Ω–∞—é! –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —É–º–µ—é?"
    _tts = "–Ø –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —á–µ–≥–æ –∑–Ω–∞—é! –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —É–º–µ—é?"



    if not text:
        _text= """–ö–∞–∫ –∏ –≤—Å—è–∫–∏–π –∫–æ—à–∞—á–∏–π, —è –æ—á–µ–Ω—å –º—É–¥—Ä—ã–π –∏ –º–Ω–æ–≥–æ —á–µ–≥–æ –∑–Ω–∞—é.\n\n–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ –∫–æ—Ä–ø—É—Å–∞—Ö –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û, –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞—Ö, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö. –û–±—Ä–∞—â–∞–π—Å—è!\n\n–ó–Ω–∞—é –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π! –°–ø–æ–∫–æ–π–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ "–õ–æ–º–æ" –∏–ª–∏ "–ö—Ä–æ–Ω–≤—É" ‚Äì —è –ø–æ–π–º—É! –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ —è —É–º–µ—é?"""
        _tts = """–ö–∞–∫ –∏ –≤—Å—è–∫–∏–π –∫–æ—à–∞—á–∏–π, —è –æ—á–µ–Ω—å –º—É–¥—Ä—ã–π –∏ –º–Ω–æ–≥–æ —á–µ–≥–æ –∑–Ω–∞—é.\n\n–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ –∫–æ—Ä–ø—É—Å–∞—Ö –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú+–û, –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞—Ö, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö. –û–±—Ä–∞—â–∞–π—Å—è!\n\n–ó–Ω–∞—é –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π! –°–ø–æ–∫–æ–π–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ "–õ+–æ–º–æ" –∏–ª–∏ "–ö—Ä+–æ–Ω–≤—É" ‚Äì —è –ø–æ–π–º—É! –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ —è —É–º–µ—é?"""
    

    if not show_text:
        _text=""
        _tts=""

    if text:
        _text = f"{text}\n\n{_text}"
    
    if tts:
        _tts = f"{tts}\n\n{_tts}"


    init_response = AliceResponse(event, text=_text, tts=_tts, intent_hooks={'YANDEX.CONFIRM':'help_intent'})
    init_response.to_slots("offset", 0)
    init_response.add_txt_buttons(['–î–∞', '–°–∫–∏–¥–∫–∏', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è','–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏','–ö–æ—Ä–ø—É—Å–∞'])
    return init_response


def build_phrase(_object, field):
    text = _object.get(field, "")
    tts = _object.get(f"{field}_tts", text)
    return {"text": text, "tts": tts}


def hello_intent(event, new_user=False, *args, **kwargs):
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞—Ä—Å - —Ç–≤–æ–π –ú–µ–≥–∞–ê–¥–∞–ø—Ç–µ—Ä –≤ –ò–¢–ú–û!\n\n–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üòÅ\n\n–ù–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É–º–µ—é? ü§î"
    if new_user:
        text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∞—Ä—Å - —Ç–≤–æ–π –ú–µ–≥–∞–ê–¥–∞–ø—Ç–µ—Ä –≤ –ò–¢–ú–û!\n\n–Ø —Ç–∞–ª–∏—Å–º–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Å 2013 –≥–æ–¥–∞, –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –æ –Ω–µ–º –∑–Ω–∞—é –∏ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥–µ–ª—é—Å—å —Å —Ç–æ–±–æ–π!\n\n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é?"
    response = AliceResponse(event=event, text=text, intent_hooks={'YANDEX.CONFIRM':'common_intent'})
    response.add_txt_buttons(['–î–∞', '–°–∫–∏–¥–∫–∏', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è','–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏','–ö–æ—Ä–ø—É—Å–∞'])
    return response

def goodby_intent(event, *args, **kwargs):
    return AliceResponse(event=event, text="–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!", end_session=True)



def about_coworkings(event, *args, **kwargs):
    

    text = "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏ –µ—Å—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ—Ä–ø—É—Å–∞—Ö:\n\n1. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞\n2. –ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π\n3. –ë–∏—Ä–∂–µ–≤–∞—è –ª–∏–Ω–∏—è\n4. –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ\n\n–ö–∞–∫–æ–π –∫–æ—Ä–ø—É—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î"
    tts = """
    –ö–æ–≤+–æ—Ä–∫–∏–Ω–≥–∏ –µ—Å—Ç—å –≤ —Å–ª+–µ–¥—É—é—â–∏—Ö –∫–æ—Ä–ø—É—Å+–∞—Ö:

    - –õ–æ–º–æ–Ω+–æ—Å–æ–≤–∞.
    - –ö—Ä+–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π.
    - –ë–∏—Ä–∂–µ–≤+–∞—è –ª–∏–Ω–∏—è.
    - –ß–∞–π–∫+–æ–≤—Å–∫–æ–≥–æ.

    –ö–∞–∫–æ–π –∫–æ—Ä–ø—É—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?
    """
    response = AliceResponse(event=event, text=text, tts=tts, intent_hooks={"numbers":"about_coworking_enum", "about_campus_enum":"about_coworking_enum"})
    response.add_txt_buttons(['–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞', '–ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π', '–ë–∏—Ä–∂–µ–≤–∞—è –ª–∏–Ω–∏—è', '–ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ'])
    return response


def about_coworking_enum(event, campus='lomo', number=-1, offset=0, init=False,  *args, **kwargs):
    if init:
        offset=0

    campuses = ['lomo', 'kronva', 'birga', 'chaika']
    if (number-1) in range(len(campuses)):
        campus = campuses[number-1]

    coworkings = coworking_getter(offset=offset, campus=campus, top=True)
    if coworkings:
        phrase = build_phrase(coworkings[0], 'phrase')
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"about_coworking_enum"})
        if len(coworkings) == 2:
            response.add_text(randomchoice(["–ù–∞–π—Ç–∏ –µ—â—ë –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –∑–¥–µ—Å—å?", "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –µ—â–µ –æ–¥–Ω–æ–º –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ –∑–¥–µ—Å—å?", "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –µ—â—ë –æ–¥–Ω–æ–º?"]))
            response.to_slots("offset", offset+1)
            response.add_txt_buttons(['–î–∞'])
        if len(coworkings) == 1:
            phrase['text'] = f"{phrase['text']}\n\n–í –∫–æ—Ä–ø—É—Å–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–≤."
            phrase['tts'] = f"{phrase['tts']} –í –∫–æ—Ä–ø—É—Å–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –∫–æ–≤+–æ—Ä–∫–∏–Ω–≥–æ–≤."
            return common_intent(event, **phrase)
        return response
    pass


def about_campuses(event, *args, **kwargs):
    text = "–í—Å–µ–≥–æ —É –ò–¢–ú–û –µ—Å—Ç—å 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤:\n\n1. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞\n2. –ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π\n3. –ë–∏—Ä–∂–µ–≤–∞—è –ª–∏–Ω–∏—è\n4. –ì—Ä–∏–≤—Ü–æ–≤–∞\n5. –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ\n\n–û –∫–∞–∫–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ?"
    tts = "–í—Å–µ–≥–æ —É –ò–¢–ú+–û –µ—Å—Ç—å 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤: –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞. –ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π.–ë–∏—Ä–∂–µ–≤–∞—è –ª–∏–Ω–∏—è.–ì—Ä–∏–≤—Ü–æ–≤–∞.–ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ. –û –∫–∞–∫–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ?"
    response = AliceResponse(event=event, text=text, tts=tts, intent_hooks={"numbers":"about_campus_enum", "about_campus_enum":"about_campus_enum"})
    response.add_txt_buttons(['–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞', '–ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π', '–ë–∏—Ä–∂–µ–≤–∞—è –ª–∏–Ω–∏—è', '–ì—Ä–∏–≤—Ü–æ–≤–∞', '–ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ'])
    return response


def about_campus_enum(event, campus='lomo', number=-1, init=False, question_offset=0, offset=0, *args, **kwargs):
    if init:
        offset=0
        question_offset=0

    campuses = ['lomo', 'kronva', 'birga', 'chaika']
    if (number-1) in range(len(campuses)):
        campus = campuses[number-1]

    
    questions = campus_questions_getter(offset=question_offset)
    campuses = campuses_getter(offset=offset, campus=campus)
    if campuses:
        phrase = build_phrase(campuses[0], 'phrase')
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"about_campus_details", "YANDEX.REJECT":"reject_campus_details"})
        if len(campuses) == 2:
            question_phrase = build_phrase(questions[0], 'question')
            response.add_text(**question_phrase)
            response.to_slots("campus", campus)
            response.to_slots("field", questions[0]['field'])
            response.to_slots("offset", offset+1)
            response.add_txt_buttons(['–î–∞'])
        if len(campuses) == 1:
            question_phrase = build_phrase(questions[0], 'question')
            response.add_text(**question_phrase)
            response.to_slots("campus", campus)
            response.to_slots("field", questions[0]['field'])
            response.to_slots("offset", offset+1)
        return response

def reject_campus_details(event, offset=0, *args, **kwargs):
    text = "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –¥—Ä—É–≥–∏–µ –∫–æ—Ä–ø—É—Å–∞?"
    tts = "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –¥—Ä—É–≥–∏–µ –∫–æ—Ä–ø—É—Å+–∞?"
    if offset==5:
            return common_intent(event, "–ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –ø—Ä–æ –∫–æ—Ä–ø—É—Å–∞.")
    response = AliceResponse(event=event, text=text, tts=tts, intent_hooks={"YANDEX.CONFIRM":"about_campus_enum"})
    response.add_txt_buttons(['–î–∞'])
    return response

def about_campus_details(event, campus='lomo', field='history', init=False, question_offset=0, offset=0, *args, **kwargs):
    if init:
        question_offset=0
        offset=0
    questions = campus_questions_getter(offset=question_offset, field=f"{field}")
    campus = campuses_getter(offset=0, campus=campus)[0]
    
    if questions:
        phrase = build_phrase(campus, questions[0]['field'])
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"about_campus_details", "YANDEX.REJECT":"reject_campus_details"})
        response.add_txt_buttons(['–î–∞'])
        if len(questions) == 2:
            question_phrase = build_phrase(questions[1], 'question')
            response.add_text(**question_phrase)
            response.to_slots("question_offset", question_offset+1)
            if offset == 0:
                response.to_slots("offset", 1)
                response.to_slots("campus", campus)
        if len(questions) == 1:
            response.add_text("–≠—Ç–æ –≤—Å–µ, —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —ç—Ç–æ—Ç –∫–æ—Ä–ø—É—Å, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –¥—Ä—É–≥–æ–π?")
            response.intent_hooks = {"YANDEX.CONFIRM":"about_campus_enum"}
        return response
    return AliceResponse(event=event, text='about_campus_details')





def about_apps(event, *args, **kwargs):
    text= "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ:\n\n1. my.itmo\n2. itmo.map\n3. –ò–°–£\n4. itmo.students\n\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    tts = "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –º–∞–π –∏—Ç–º+–æ. –∏—Ç–º+–æ –º—ç–ø. –ò–°+–£. –∏ –∏—Ç–º+–æ —Å—Ç—å+—é–¥–µ–Ω—Å  –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    response = AliceResponse(event=event, text=text, tts=tts, intent_hooks={"numbers":"about_app_enum"})
    response.add_txt_buttons(['my.itmo', 'itmo.map', '–ò–°–£', 'itmo.students'])
    return response
    

def about_app_enum(event, app="isu", offset=0, number=-1, init=False, *args, **kwargs):
    if init:
        offset = 0

    apps = ["my_itmo", "itmo_map", "ISU", "itmo_students"]
    if (number-1) in range(len(apps)):
        app = apps[number-1]
    apps = apps_getter(offset=offset, app=app)
    if apps:
        phrase = build_phrase(apps[0], "phrase")
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"about_app_enum"})
        if len(apps) == 2:
            response.add_text("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –µ—â—ë –æ–¥–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?")
            response.to_slots("offset", offset+1)
            response.add_txt_buttons(['–î–∞'])
        if len(apps) == 1:
            phrase['text'] = f"{phrase['text']}\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç."
            phrase['tts'] = f"{phrase['tts']} –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç."
            return common_intent(event, **phrase)
        return response


def about_faq(event, object_faq='name_rector', offset=0, topic=None, init=False, *args, **kwargs):
    """
    params:
    event - parsed request
    object_faq - FAQ name
    offset - step of list
    topic - category of discount
    return:
    response
    """
    if init:
        offset = 0
        topic = None

    if topic is None:
        objects_faq = faq_getter(offset, object_faq)
        topic = objects_faq[0]['topic']
    print(object_faq, topic)
    objects_faq = faq_getter(offset, object_faq, topic)
    if objects_faq:
        phrase = build_phrase(objects_faq[0], "answer")
        print(phrase)
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM": "about_faq"})
        if len(objects_faq) == 2:
            question = build_phrase(objects_faq[1], "bot_question")
            response.add_text(**question)
            response.to_slots("offset", offset + 1)
            if offset==0:
                response.to_slots("topic", topic)
        elif len(objects_faq) == 1:
            phrase['text'] = f"{phrase['text']}\n\n–§—É—Ö, –Ω–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å–µ..."
            phrase['tts'] = f"{phrase['tts']} –§—É—Ö, –Ω–∞ —ç—Ç–æ–º —É –º–µ–Ω—è –≤—Å–µ..."
            return common_intent(event, **phrase)
        return response


def about_discounts(event, *args, **kwargs):
    text = "–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Å–∫–∏–¥–∫–∏ –æ–∫–æ–ª–æ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–æ—Ä–ø—É—Å–∞ –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n1. –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üïπÔ∏è\n2. –°–ø–æ—Ä—Ç üí™ \n3. –ï–¥–∞ üçî\n4. –ó–¥–æ—Ä–æ–≤—å–µ üè• \n5. –£—á–µ–±–∞ üíª\n\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î"
    tts = "–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Å–∫–∏–¥–∫–∏ –æ–∫–æ–ª–æ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–æ—Ä–ø—É—Å–∞ –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. üïπÔ∏è–°–ø–æ—Ä—Ç. üí™–ï–¥–∞. üçî–ó–¥–æ—Ä–æ–≤—å–µ. üè• –£—á–µ–±–∞. üíª\n\n–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î"
    response = AliceResponse(event=event, text=text, tts=tts, intent_hooks={"numbers":"about_discounts_by_category", "about_campus_enum":"about_discounts_campus"})
    response.add_txt_buttons(["—É –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞","–ï–¥–∞", "–°–ø–æ—Ä—Ç", "–ï–¥–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–£—á–µ–±–∞"])
    return response

def about_discounts_by_category(event, campus=None, category="food", number=-1, offset=0, init=False, *args, **kwargs):
    seed(offset)
    if init:
        offset=0

    categories = ["rest", "sport", "food", "health", "edu"]
    if (number-1) in range(len(categories)):
        categories = categories[number-1]

    discounts = discounts_getter(offset=offset, category=category, campus=campus)
    if discounts:
        phrase = build_phrase(discounts[0], 'phrase')
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"about_discounts_by_category"})
        if len(discounts) == 2:
            response.add_text(randomchoice(["–ù–∞–π—Ç–∏ –µ—â–µ —Å–∫–∏–¥–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?"]))
            response.to_slots("offset", offset+1)
            response.to_slots("link", discounts[0]["link"])
            response.to_slots("prev_intent", 'about_discounts_by_category')
            link = discounts[0]["link"]
            if link != "-":
                response.add_button(Button("–°—Å—ã–ª–∫–∞", discounts[0]["link"]))
            response.add_txt_buttons(['–î–∞'])
        if len(discounts) == 1:
            phrase['text'] = f"{phrase['text']}\n\n–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∫–∏–¥–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            phrase['tts'] = f"{phrase['tts']} –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∫–∏–¥–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            return common_intent(event, **phrase)
        return response
    pass

def about_discounts_campus(event, campus="lomo", category="food", init=False, offset=0, *args, **kwargs):
    seed(offset)
    if init:
        offset=0

    discounts = discounts_getter(offset=offset, category=category, campus=campus)
    if discounts:
        phrase = build_phrase(discounts[0], 'phrase')
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"about_discounts_campus"})
        if len(discounts) == 2:
            response.add_text(randomchoice(["–ù–∞–π—Ç–∏ –µ—â—ë —Å–∫–∏–¥–∫–∏ —Ä—è–¥–æ–º —Å —ç—Ç–∏–º –∫–æ—Ä–ø—É—Å–æ–º?", "–ù–∞–π—Ç–∏ –µ—â—ë —Å–∫–∏–¥–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏?"]))
            response.to_slots("offset", offset+1)
            response.to_slots("link", discounts[0]["link"])
            response.to_slots("prev_intent", 'about_discounts_campus')
            link = discounts[0]["link"]
            if link != "-":
                response.add_button(Button("–°—Å—ã–ª–∫–∞", discounts[0]["link"]))
            response.add_txt_buttons(['–î–∞'])
        if len(discounts) == 1:
            phrase['text'] = f"{phrase['text']}\n\n–ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∫–∏–¥–æ–∫ —Ä—è–¥–æ–º."
            phrase['tts'] = f"{phrase['tts']} –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∫–∏–¥–æ–∫ —Ä—è–¥–æ–º."
            return common_intent(event, **phrase)
        return response
    pass

    return AliceResponse(event, f"–æ —Å–∫–∏–¥–∫–∞—Ö —É –º–µ—Å—Ç–∞ {campus}")

def link(event, link, prev_intent, *args, **kwargs):
    text = f"{link}\n\n–ù–∞–π—Ç–∏ –µ—â—ë —Å–∫–∏–¥–∫—É?"
    tts = f"–ù–∞–π—Ç–∏ –µ—â—ë —Å–∫–∏–¥–∫—É?"
    response = AliceResponse(event, text, tts, intent_hooks={"YANDEX.CONFIRM":prev_intent})
    response.add_txt_buttons(['–î–∞'])
    return response

def repeat(event:AliceEvent, *args, **kwargs):
    return AliceResponse(event=event, text=event.state["text"], tts=event.state["tts"], state=event.state, repeat=True)

def fallback(event:AliceEvent, *args, **kwargs):
    return AliceResponse(event, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ")

def reject(event:AliceEvent, *args, **kwargs):
    return common_intent(event, text="–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏, —Å–∫–∞–∂–∏ \"–ü–æ–∫–∞\" –∏–ª–∏ \"–•–≤–∞—Ç–∏—Ç\"")

def help_intent(event:AliceEvent, offset=0, init=False, *args, **kwargs):
    seed(offset)
    text = ""

    if init:
        offset=0
        text = "–ë–∞—Ä—Å –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ–º–æ—â—å!\n\n–Ø –º–æ–≥—É –º–Ω–æ–≥–æ —á–µ–≥–æ. –†–∞—Å—Å–∫–∞–∂—É –ø–æ –ø–æ—Ä—è–¥–∫—É:"

    guide = help_getter(offset=offset)


    if guide:
        phrase = build_phrase(guide[0], "guide")
        phrase['text'] = f"{text}\n\n{phrase['text']}"
        phrase['tts'] = f"{text}\n\n{phrase['tts']}"
        response = AliceResponse(event=event, **phrase, intent_hooks={"YANDEX.CONFIRM":"help_intent"})
        if len(guide) == 2:
            response.add_text(randomchoice(["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —è –µ—â—ë —É–º–µ—é?", "–†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —è –µ—â—ë —É–º–µ—é?"]))
            response.add_txt_buttons(['–î–∞', '–°–∫–∏–¥–∫–∏', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è','–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏','–ö–æ—Ä–ø—É—Å–∞'])
            response.to_slots("offset", offset+1)
        if len(guide) == 1:
            phrase['text'] = f"{phrase['text']}\n\n–û–±—Ä–∞—â–∞–π—Å—è! –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑, —á—Ç–æ —è —É–º–µ—é?"
            phrase['tts'] = f"{phrase['tts']}–û–±—Ä–∞—â–∞–π—Å—è! –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑, —á—Ç–æ —è —É–º–µ—é?"
            return common_intent(event, **phrase, show_text=False)
        return response


    return AliceResponse(event=event, text=text)


INTENTS = {
    'about_campuses':  about_campuses,
    'about_apps': about_apps,
    'YANDEX.REPEAT': repeat,
    'YANDEX.REJECT': reject,
    'about_app_enum': about_app_enum,
    'about_faq': about_faq,
    'about_discounts': about_discounts,
    'about_coworkings': about_coworkings,
    'about_coworking_enum': about_coworking_enum,
    'about_campus_enum':about_campus_enum,
    'about_campus_details':about_campus_details,
    'reject_campus_details':reject_campus_details,
    'YANDEX.HELP':help_intent,
    'help_intent': help_intent,
    'YANDEX.WHAT_CAN_YOU_DO' : common_intent,
    'repeat': repeat,
    'hello_intent': hello_intent,
    'common_intent': common_intent,
    'goodby_intent': goodby_intent,
    'about_discounts_by_category':about_discounts_by_category,
    'about_discounts_campus': about_discounts_campus,
    'about_discounts_by_category': about_discounts_by_category,
    'link':link
}


class BotHandler(APIView):
    def post(self, request):
        event = AliceEvent(request=request)
        intent, slots = event.get_intent()

        if event.new:
            try:
                user = get_object_or_404(user_models.User, alice_user_id=event.user_id)
                return Response(hello_intent(event=event, new_user=False)(screen="hello"))
            except:
                serializer = user_serializers.UserSerializer(data={"alice_user_id":event.user_id, "name":"unknown"})
                if serializer.is_valid():
                    serializer.save()
                return Response(hello_intent(event=event, new_user=True)(screen="hello"))


        if intent:
            try:
                if event.intent_hooks:
                    try:
                        slots = {**event.slots, **slots}
                        print("–ß–ê–°–¢–ù–´–ô –ò–ù–¢–ï–ù–¢")
                        return Response(INTENTS[event.intent_hooks[intent]](event, **slots)(intent, slots=slots))
                    except KeyError as e:
                        print(e)
                print("–û–ë–©–ò–ô –ò–ù–¢–ï–ù–¢")
                return Response(INTENTS[intent](event, init=True, **slots)(screen=intent, slots=slots))
            except KeyError as e:
                return Response(fallback(event=event)("fallback"))
        else:
            text = "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§î\n\n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É–º–µ—é?"
            tts = "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n\n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É–º–µ—é?"
            response = AliceResponse(event, text=text, tts=tts, intent_hooks={'YANDEX.CONFIRM':'common_intent'})
            response.add_txt_buttons(["–î–∞"])
            return Response(response("don't understand"))
